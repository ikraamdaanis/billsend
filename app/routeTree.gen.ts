/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard/index'
import { Route as DashboardSettingsRouteImport } from './routes/dashboard/settings'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authCreateOrganisationRouteImport } from './routes/(auth)/create-organisation'
import { Route as DashboardInvoicesIndexRouteImport } from './routes/dashboard/invoices/index'
import { Route as DashboardClientsIndexRouteImport } from './routes/dashboard/clients/index'
import { Route as DashboardInvoicesCreateRouteImport } from './routes/dashboard/invoices/create'
import { Route as DashboardInvoicesInvoiceIdRouteImport } from './routes/dashboard/invoices/$invoiceId'
import { Route as DashboardClientsCreateRouteImport } from './routes/dashboard/clients/create'
import { Route as DashboardClientsClientIdRouteImport } from './routes/dashboard/clients/$clientId'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardSettingsRoute = DashboardSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const authCreateOrganisationRoute = authCreateOrganisationRouteImport.update({
  id: '/create-organisation',
  path: '/create-organisation',
  getParentRoute: () => authRouteRoute,
} as any)
const DashboardInvoicesIndexRoute = DashboardInvoicesIndexRouteImport.update({
  id: '/invoices/',
  path: '/invoices/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardClientsIndexRoute = DashboardClientsIndexRouteImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInvoicesCreateRoute = DashboardInvoicesCreateRouteImport.update({
  id: '/invoices/create',
  path: '/invoices/create',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInvoicesInvoiceIdRoute =
  DashboardInvoicesInvoiceIdRouteImport.update({
    id: '/invoices/$invoiceId',
    path: '/invoices/$invoiceId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardClientsCreateRoute = DashboardClientsCreateRouteImport.update({
  id: '/clients/create',
  path: '/clients/create',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardClientsClientIdRoute =
  DashboardClientsClientIdRouteImport.update({
    id: '/clients/$clientId',
    path: '/clients/$clientId',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/create-organisation': typeof authCreateOrganisationRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard/clients/$clientId': typeof DashboardClientsClientIdRoute
  '/dashboard/clients/create': typeof DashboardClientsCreateRoute
  '/dashboard/invoices/$invoiceId': typeof DashboardInvoicesInvoiceIdRoute
  '/dashboard/invoices/create': typeof DashboardInvoicesCreateRoute
  '/dashboard/clients': typeof DashboardClientsIndexRoute
  '/dashboard/invoices': typeof DashboardInvoicesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-organisation': typeof authCreateOrganisationRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard/clients/$clientId': typeof DashboardClientsClientIdRoute
  '/dashboard/clients/create': typeof DashboardClientsCreateRoute
  '/dashboard/invoices/$invoiceId': typeof DashboardInvoicesInvoiceIdRoute
  '/dashboard/invoices/create': typeof DashboardInvoicesCreateRoute
  '/dashboard/clients': typeof DashboardClientsIndexRoute
  '/dashboard/invoices': typeof DashboardInvoicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(auth)/create-organisation': typeof authCreateOrganisationRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/dashboard/clients/$clientId': typeof DashboardClientsClientIdRoute
  '/dashboard/clients/create': typeof DashboardClientsCreateRoute
  '/dashboard/invoices/$invoiceId': typeof DashboardInvoicesInvoiceIdRoute
  '/dashboard/invoices/create': typeof DashboardInvoicesCreateRoute
  '/dashboard/clients/': typeof DashboardClientsIndexRoute
  '/dashboard/invoices/': typeof DashboardInvoicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/create-organisation'
    | '/login'
    | '/signup'
    | '/dashboard/settings'
    | '/dashboard/'
    | '/api/auth/$'
    | '/dashboard/clients/$clientId'
    | '/dashboard/clients/create'
    | '/dashboard/invoices/$invoiceId'
    | '/dashboard/invoices/create'
    | '/dashboard/clients'
    | '/dashboard/invoices'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create-organisation'
    | '/login'
    | '/signup'
    | '/dashboard/settings'
    | '/dashboard'
    | '/api/auth/$'
    | '/dashboard/clients/$clientId'
    | '/dashboard/clients/create'
    | '/dashboard/invoices/$invoiceId'
    | '/dashboard/invoices/create'
    | '/dashboard/clients'
    | '/dashboard/invoices'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/dashboard'
    | '/(auth)/create-organisation'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/dashboard/settings'
    | '/dashboard/'
    | '/api/auth/$'
    | '/dashboard/clients/$clientId'
    | '/dashboard/clients/create'
    | '/dashboard/invoices/$invoiceId'
    | '/dashboard/invoices/create'
    | '/dashboard/clients/'
    | '/dashboard/invoices/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/create-organisation': {
      id: '/(auth)/create-organisation'
      path: '/create-organisation'
      fullPath: '/create-organisation'
      preLoaderRoute: typeof authCreateOrganisationRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/dashboard/invoices/': {
      id: '/dashboard/invoices/'
      path: '/invoices'
      fullPath: '/dashboard/invoices'
      preLoaderRoute: typeof DashboardInvoicesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/clients/': {
      id: '/dashboard/clients/'
      path: '/clients'
      fullPath: '/dashboard/clients'
      preLoaderRoute: typeof DashboardClientsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/invoices/create': {
      id: '/dashboard/invoices/create'
      path: '/invoices/create'
      fullPath: '/dashboard/invoices/create'
      preLoaderRoute: typeof DashboardInvoicesCreateRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/invoices/$invoiceId': {
      id: '/dashboard/invoices/$invoiceId'
      path: '/invoices/$invoiceId'
      fullPath: '/dashboard/invoices/$invoiceId'
      preLoaderRoute: typeof DashboardInvoicesInvoiceIdRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/clients/create': {
      id: '/dashboard/clients/create'
      path: '/clients/create'
      fullPath: '/dashboard/clients/create'
      preLoaderRoute: typeof DashboardClientsCreateRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/clients/$clientId': {
      id: '/dashboard/clients/$clientId'
      path: '/clients/$clientId'
      fullPath: '/dashboard/clients/$clientId'
      preLoaderRoute: typeof DashboardClientsClientIdRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authCreateOrganisationRoute: typeof authCreateOrganisationRoute
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authCreateOrganisationRoute: authCreateOrganisationRoute,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardClientsClientIdRoute: typeof DashboardClientsClientIdRoute
  DashboardClientsCreateRoute: typeof DashboardClientsCreateRoute
  DashboardInvoicesInvoiceIdRoute: typeof DashboardInvoicesInvoiceIdRoute
  DashboardInvoicesCreateRoute: typeof DashboardInvoicesCreateRoute
  DashboardClientsIndexRoute: typeof DashboardClientsIndexRoute
  DashboardInvoicesIndexRoute: typeof DashboardInvoicesIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardClientsClientIdRoute: DashboardClientsClientIdRoute,
  DashboardClientsCreateRoute: DashboardClientsCreateRoute,
  DashboardInvoicesInvoiceIdRoute: DashboardInvoicesInvoiceIdRoute,
  DashboardInvoicesCreateRoute: DashboardInvoicesCreateRoute,
  DashboardClientsIndexRoute: DashboardClientsIndexRoute,
  DashboardInvoicesIndexRoute: DashboardInvoicesIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
